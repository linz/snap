# Install the path to the SNAP software...
# LINZ specific SNAP configuration

$_con_crs_path=""
$_crd_crs=""
$message=""

if $is_windows then
   foreach $drive in 'R','L','I','J','K','M','N','O','P','Q','S','T' do
      $testpath="$drive:\\NORA\\Geodetic\\software\\con_crs"
      if DirectoryExists($testpath) then
         $message="Found con_crs application directory $testpath\n"
         $_con_crs_path=$testpath
         $_crd_crs=$testpath.'\crd_crs.bat'
         InsertPath($testpath)
         break
      endif
   endforeach
   if $_con_crs_path == "" then 
      $message="Warning: con_crs path not found"
   endif
   $homedir=GetEnv('APPDATA')
   $dos_startup_file=$homedir.'\linz\snapstartup.bat'
   if FileExists($dos_startup_file) then
       $message=$message."Installing DOS startup file $dos_startup_file"
       $_commandparams = " /F:ON /E:ON /K \"TITLE SNAP command window & CLS & ECHO Running $dos_startup_file & $dos_startup_file\""
   else
       $message="DOS window startup batch file can be installed into $dos_startup_file"
   endif
endif
$_startup_message=$_startup_message."LINZ snap plugin installed\n$message\n"

# Try to find python.

$_pythondone=false

# Don't use existing python installation as may not have what we need
#$_python=FindProgram("python")
#if $_python then $_pythondone=true endif

function ConfigurePython()
   if not $_pythondone then
      $perl=FindPerl()
      $script = Filename("findpython.pl","absolute",Filename($script_file,"directory"))
      if not FileExists($script) then
         return ''
      endif
      # Log("Running $perl $script")
      $output=LogRun($perl,$script)
      # Log("Output: $output")
      $nline=0
      foreach $line in $output do
         $nline=$nline+1
         if $nline == 1 then
            $pyversion=$line
         elseif $nline == 2 then
            $pydir=$line
         elseif $nline == 3 then
            $pyhome=$line
         elseif $nline == 4 then
            $pypath=$line
         elseif $nline == 5 then
            $missing=$line
         endif
      endforeach
      if Match($pyversion,'^\d+\.') then
         InsertPath("$pyhome/scripts")
         InsertPath($pydir)
         SetEnv("PYTHONHOME",$pyhome)
         SetEnv("PYTHONPATH",$pypath)
         SetEnv("gotpython","Y")
         Log("Found python $pyversion at $pydir\n")
         if $missing then
             Log("Missing python modules: $missing")
         endif
      else
         Log("Python not found\n")
      endif
      $_pythondone=true
   endif
end_function   

# Overwrite RunCommandShell function to configure python before running
function RunCommandShell() 
   ConfigurePython()
   $command=$_commandshell
   if $_commandparams then
      $command="\"$command\" $_commandparams"
   endif
   start($command)
end_function   

###################################################################################
# Updated calculate orders script to include option to calculate Landonline 
# files...

function CalculateCoordinateOrders()

   $usectrl = true
   $newcrd = true
   $maxorder = "5"
   $lolfiles = false
   $loltolerance = "0.005"
   $lolcombined = false
   
   dialog "Calculate orders"
   label "Use snapspec to calculate orders of adjusted stations"
   label "based on horizontal relative accuracy"
   spacer
   textbox  $maxorder "Highest order to calculate" "5::~0123456789~^([0-9]|1[012])\$~Order must be a valid order 0-12"
   spacer
   checkbox $usectrl "Only calculate orders lower than fixed station orders"
   checkbox $newcrd "Update coordinate file with calculated orders"
   checkbox $lolfiles "Generate landonline files with crd_crs for each order"
   checkbox $lolcombined "Generate single landonline file regardless of order"
   textbox $loltolerance "Tolerance of changes to LOL coordinates" "6::~0123456789.~^[0-9]+\.?[0-9]*\$~Tolerance must be a valid number"
   spacer
   end_dialog
   
   $binfile = FindJobFile("bin")
   $lstfile = "snapspec.lst"
   $lolroot = FileName($job_file,"name")."_crd"
  
   if $maxorder then $maxorder = "-o $maxorder" endif
   if $usectrl then $usectrl = "-a" endif
   if $lolfiles then 
      $lolfiles = "-f \"$lolroot\""
   endif
   
   $newcrdfile = ""
   if $newcrd then
      if not BackupCoordinateFile($coordinate_file) then
         message("Could not back up coordinate file","Error")
         exit
      endif
      $newcrdfile = TempFile()
      DeleteFile($newcrdfile)
      $newcrd = "-u \"$newcrdfile\""
   endif
   $output = LogRun("\"$snap_path/snapspec\" $maxorder $usectrl $lolfiles $newcrd \"$binfile\" \"$lstfile\"")
   
   if not FileExists($lstfile) then
      message("Snapspec failed\n\n$output","Error")
      exit
   endif
   
   $message = "Snapspec output in snapspec.lst"
   if $newcrdfile then
      if FileExists($newcrdfile) then
         RenameFile($newcrdfile,$coordinate_file)
         log("\nCoordinate file updated with new orders by snapspec")
      else
         $message = $message . "\n\nSnapspec could not calculate new orders"
      endif
   endif
   
   $lolmessage = ""
   $lolerror = ""
   
   if $lolfiles then
      $lolfilelist = Directory(".",$lolroot."*.crd")
      if FileExists($_crd_crs) then
         foreach $crdfile in $lolfilelist do
            $pattern = $lolroot."_(.*)\\.crd\$"
            $crdorder = Match($crdfile,$pattern,1)
            if not $crdorder then $crdorder = "5" endif
            Log("\nCreating order $crdorder Landonline file")
            $lolmaxorder = Match("5 6 8 8 ",$crdorder." ([^ ]+)",1)
            if not $lolmaxorder then $lolmaxorder = "6" endif
            $crsfile = SetExtension($coordinate_file,"")."_crs_$crdorder.csv"
            $crsroot = SetExtension($crsfile,"")
            DeleteFile($crsfile)
            debuglogrun("\"$_crd_crs\" -u mamossup -j $loltolerance -k $lolmaxorder -s \"$crdfile\" \"$crsroot\"")
            if FileExists($crsfile) then
               DeleteFile($crdfile)
               $lolmessage = $lolmessage . "\n   $crsfile"
               Log("Created landonline file $crsfile")
            else
               Log("Could not create landonline file")
               $lolmessage = $lolmessage . "\n   Could not convert $crdfile"
            endif
         endforeach
      else
         $lolerror = "Cannot find the crd_crs translator\nSNAP coordinate files are\n$lolfilelist"
      endif
   endif
   
   if $lolcombined then
      if FileExists($_crd_crs) then
		  $crdfile = $coordinate_file
		  $newfile = SetExtension($crdfile,"new")
		  if FileExists($newfile) then $crdfile = $newfile endif
            $crsfile = SetExtension($coordinate_file,"")."_crs_all.csv"
          $crsroot = SetExtension($crsfile,"")
		  DeleteFile($crsfile)
		  Log("\nCreating combined orders landonline file from $crdfile")
		  debuglogrun("\"$_crd_crs\" -u mamossup -j $loltolerance -k 6 -s \"$crdfile\" \"$crsroot\"")
		  if FileExists($crsfile) then
			  $lolmessage = $lolmessage."\n   $crsfile"
			  if $crdfile != $coordinate_file then
				 $lolmessage = $lolmessage." - Update file $newfile used for coordinates"
			  endif
			  Log("Created Landonline file $crsfile")
		  else
		       Log("Could not create landonline file")
			   $lolmessage = $lolmessage."\n   Could not convert $crsfile"
          endif
      else
         $lolerror = "Cannot find the crd_crs translator\nSNAP coordinate files are\n$lolfilelist"
      endif
   endif
   
   if $lolerror then
      message($lolerror,"crd_crs error")
   # elseif $lolmessage then
   #   message("The following files are ready to load into Landonline".$lolmessage,"Landonline files")
   endif
   
   if ask($message."\n\nDo you want to view the snapspec listing file\n","View report") then
      start($_editor,$lstfile)
   endif
end_function
